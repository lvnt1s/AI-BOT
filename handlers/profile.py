from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.enums.chat_type import ChatType
from states import states
from aiogram.types import Message,CallbackQuery
from database.database import SessionLocal
from aiogram.fsm.context import FSMContext
from crud.operations import get_user
from keyboards.inline import keyboards as inline
from utils.payments import create_cryptobot_invoice

router = Router()

@router.message(F.text == 'üìÇ –ü—Ä–æ—Ñ–∏–ª—å', F.chat.type == ChatType.PRIVATE)
async def profile(message: Message, db = SessionLocal()):
    user = get_user(db, message.from_user.id)
    registration_date = datetime.fromtimestamp(user.registeredAt).strftime('%d.%m.%Y')
    
    await message.answer(f"""üì± <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>

üîë ID: <code>{message.from_user.id}</code>
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{registration_date}</code>

‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: <code>{user.energy_count}</code>
üí≥ –ë–∞–ª–∞–Ω—Å: <code>{user.balance} ‚ÇΩ</code>""",
                         reply_markup=await inline.profile())


@router.callback_query(F.data == 'profile')
async def profile_back(callback: CallbackQuery,bot: Bot, db = SessionLocal()):
    user = get_user(db, callback.from_user.id)
    registration_date = datetime.fromtimestamp(user.registeredAt).strftime('%d.%m.%Y')

    await bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text=f"""üì± <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>

üîë ID: <code>{callback.from_user.id}</code>
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{registration_date}</code>

‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: <code>{user.energy_count}</code>
üí≥ –ë–∞–ª–∞–Ω—Å: <code>{user.balance} ‚ÇΩ</code>""",reply_markup=await inline.profile())

@router.callback_query(F.data == 'refferals')
async def refferals(callback: CallbackQuery,bot: Bot, db = SessionLocal()):
    user = get_user(db, callback.from_user.id)
    bot_info = await bot.me()

    await bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text=f"""<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—ã</b>
<i>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π.</i>

<b>üîó</b> –°—Å—ã–ª–∫–∞:  t.me/{bot_info.username}?start={callback.from_user.id}
<b>‚öñÔ∏è –°—Ç–∞–≤–∫–∞:</b>  {user.refferals_percent}%

<b>üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b>  {user.refferals_count}
<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏–ª–∏:</b>  {user.refferals_deposit_count}
<b>üõç –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>  {user.refferals_earned} ‚ÇΩ""",reply_markup=await inline.profile_back())

    

@router.callback_query(F.data == 'deposit')
async def deposit(callback: CallbackQuery, bot: Bot, state: FSMContext, db = SessionLocal()):
    msg = await bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text=f"""<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>
‚îî –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ù–µ –≤–≤–µ–¥–µ–Ω–∞</code>

<i>‚ô¶Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>""",reply_markup=await inline.deposit_amounts())
    await state.update_data(message_id = msg.message_id)
    await state.set_state(states.deposit.amount)



@router.message(states.deposit.amount)
async def enter_amount(message: Message, bot: Bot, state: FSMContext):
    await message.delete()
    data = await state.get_data()

    if message.text.replace('.', '', 1).isdigit() and message.text.count('.') <= 1:
        amount = float(message.text)
        if amount >= 1:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'],
                                          text=f"""<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>
‚îú –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:  <code>{amount} ‚ÇΩ</code>
‚îî –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:  <code>–ù–µ –≤—ã–±—Ä–∞–Ω–∞</code>

<i>‚ô¶Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>""",
                                          reply_markup=await inline.deposit_methods(amount))
        else:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'],
                                          text=f"""<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n(<i>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 ‚ÇΩ</i>)</b>""",
                                          reply_markup=await inline.profile_back())
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=data['message_id'],
                                      text=f"""<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n(<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ</i>)</b>""",
                                      reply_markup=await inline.profile_back())
    await state.clear()

@router.callback_query(F.data.startswith('methods'))
@router.callback_query(F.data.startswith('amount'))
async def deposit(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    amount = float(callback.data.split('|')[1])
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        text=f"""<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>
‚îú –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:  <code>{amount} ‚ÇΩ</code>
‚îî –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:  <code>–ù–µ –≤—ã–±—Ä–∞–Ω–∞</code>

<i>‚ô¶Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>""",
                                        reply_markup=await inline.deposit_methods(amount))  
    


@router.callback_query(F.data.startswith('payment_method'))
async def deposit(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    amount = float(callback.data.split('|')[2])
    url = await create_cryptobot_invoice(amount)

    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        text=f"""<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>
‚îú –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:  <code>{amount} ‚ÇΩ</code>
‚îî –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:  <code>{callback.data.split('|')[1]} </code>

<i>‚ùî –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>

<b>‚òπÔ∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –¥–æ—à—ë–ª –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞?</b>
<i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã..</i>""",
                                        reply_markup=await inline.payment_buttons(amount,url))
    
